[
 {
  "code": "// Data Export\r\ncore => {\r\n  core.scriptManager.addEvents({\r\n    doctype: \"Data Export\",\r\n    eventDict: {\r\n      form_setup: (c, doc) => {\r\n        addExportButton(doc);\r\n      },\r\n      reference_doctype: (c, doc) => {\r\n        const doctype = doc.reference_doctype;\r\n        if (doctype) {\r\n          showSpinner(true);\r\n          core.meta.getDocMeta({ doctype }).then(r => {\r\n            showSpinner(false);\r\n            if (r.success) {\r\n              setFieldOptions(doc, doctype, r.data);\r\n              setTimeout(() => {\r\n                window.RSdataExportSelectAll(doctype, true);\r\n              }, 500);\r\n            } else {\r\n              showMessage(\"red\", \"Failed loading doctype, Please try again\");\r\n            }\r\n          });\r\n        } else {\r\n          resetFilterAndFields(doc);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  window.setDataExportFieldEnableDisabled = (doctype, fieldname, e) => {\r\n    const d = getFieldSelection();\r\n    d[doctype] = d[doctype] || [];\r\n    const arr = d[doctype];\r\n    const idx = arr.indexOf(fieldname);\r\n    if (e && idx < 0) {\r\n      d[doctype].push(fieldname);\r\n    } else if (!e && idx >= 0) {\r\n      arr.splice(idx, 1);\r\n    }\r\n  };\r\n\r\n  window.RSdataExportSelectAll = (doctype, selectAll) => {\r\n    for (const e of document.getElementsByClassName(\r\n      `checkbox-dataexport-${doctype}`\r\n    )) {\r\n      e.checked = selectAll;\r\n      e.onchange();\r\n    }\r\n  };\r\n\r\n  let dataexport_fieldselection = {};\r\n  function setFieldSelection(v) {\r\n    dataexport_fieldselection = v || {};\r\n  }\r\n\r\n  function getFieldSelection() {\r\n    return dataexport_fieldselection || {};\r\n  }\r\n\r\n  function exportDoc(doc) {\r\n    showSpinner(true);\r\n    fetch(\r\n      core.config.hostUrl +\r\n        \"/api/method/frappe.core.doctype.data_export.exporter.export_data\",\r\n      {\r\n        mode: \"cors\",\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: \"JWTToken \" + core.auth.currentToken,\r\n          \"X-Requested-With\": \"XMLHttpRequest\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          // stringify selection columns for frapep access logs\r\n          select_columns: JSON.stringify(getFieldSelection()),\r\n          doctype: doc.reference_doctype,\r\n          filters: [], // TODO\r\n          file_type: doc.file_type,\r\n          template: true,\r\n          with_data: 1\r\n        })\r\n      }\r\n    )\r\n      .then(async r => {\r\n        showSpinner(false);\r\n        if ((r.status / 100) === 2) return r.blob();\r\n        return Promise.reject(await r.text());\r\n      })\r\n      .then(b => {\r\n        let objUrl = window.URL.createObjectURL(b);\r\n        var a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        a.style = \"display: none\";\r\n        a.href = objUrl;\r\n        a.download = `${doc.reference_doctype}.${\r\n          doc.file_type === \"Excel\" ? \"xlsx\" : \"csv\"\r\n        }`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(objUrl);\r\n      })\r\n      .catch((e) => {\r\n        console.error(\"Export Error\", e);\r\n        showMessage(\"red\", \"Something went wrong while exporting, Please try again\");\r\n      });\r\n  }\r\n\r\n  function setFieldOptions(doc, doctype, meta) {\r\n    setFieldSelection({});\r\n    setDocValue(\r\n      doc,\r\n      \"filter_list\",\r\n      \"<div class='text-muted'>Filters! (Coming Soon)</div>\"\r\n    );\r\n\r\n    const p = [getDocTypeFieldsHTML(doctype, doctype)];\r\n    for (const t of meta.fields.filter(f => f.fieldtype === \"Table\")) {\r\n      p.push(getDocTypeFieldsHTML(t.options, doctype));\r\n    }\r\n\r\n    Promise.all(p)\r\n      .then(htmls => {\r\n        return htmls.reduce((a, b) => a + b, \"\");\r\n      })\r\n      .then(html => {\r\n        html = `\r\n        <button onclick=\"RSdataExportSelectAll('${doctype}', true)\">Select All</button>\r\n        <button onclick=\"RSdataExportSelectAll('${doctype}', false)\">Unselect All</button>\r\n        ${html}\r\n        `;\r\n        setDocValue(doc, \"fields_multicheck\", html);\r\n      });\r\n  }\r\n\r\n  function getDocTypeFieldsHTML(doctype, ogDocType) {\r\n    return core.meta\r\n      .getDocMeta({ doctype })\r\n      .then(r => {\r\n        if (!r.success) {\r\n          return Promise.reject(\"\");\r\n        }\r\n        const meta = r.data;\r\n        const colsHtml = [\"\", \"\", \"\"];\r\n        let currentCol = 0;\r\n        for (const f of getFields(meta)) {\r\n          colsHtml[currentCol++] += `\r\n          <label>\r\n            <input class=\"checkbox-dataexport-${ogDocType}\" type=\"checkbox\" data-doctype=\"${doctype}\" data-fieldname=\"${f.fieldname}\"\r\n              onchange=\"setDataExportFieldEnableDisabled('${doctype}', '${f.fieldname}', this.checked)\"/> \r\n            ${f.label}\r\n          </label>\r\n        `;\r\n          currentCol = currentCol % 3;\r\n        }\r\n\r\n        return `\r\n      <div class=\"mt-3 mb-2 uppercase text-muted label\">${doctype}</div>\r\n      <div class=\"row\">\r\n        <div class=\"col-4 d-flex flex-column\">${colsHtml[0]}</div>\r\n        <div class=\"col-4 d-flex flex-column\">${colsHtml[1]}</div>\r\n        <div class=\"col-4 d-flex flex-column\">${colsHtml[2]}</div>\r\n      </div>\r\n      `;\r\n      })\r\n      .catch(r => {\r\n        return \"Failed template generation\";\r\n      });\r\n  }\r\n\r\n  function addExportButton(doc) {\r\n    core.bus.post({\r\n      id: \"form_add_custom_button\",\r\n      data: {\r\n        label: \"Export Data\",\r\n        onclick: (c, d) => {\r\n          if (!doc.reference_doctype) {\r\n            showMessage(\"red\", \"Please select a doctype\");\r\n            return;\r\n          }\r\n          exportDoc(doc);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  function resetFilterAndFields(doc) {\r\n    setDocValue(doc, \"filter_list\", \"\");\r\n    setDocValue(doc, \"fields_multicheck\", \"\");\r\n  }\r\n\r\n  function setDocValue(doc, fieldname, value) {\r\n    runInZone(() => {\r\n      doc[fieldname] = value;\r\n      if (doc.doctype) {\r\n        refreshField(doc.doctype, fieldname);\r\n      }\r\n    });\r\n  }\r\n\r\n  function runInZone(fn) {\r\n    if (window[\"Zone\"] && window.Zone.current) {\r\n      Zone.current.run(fn);\r\n    } else {\r\n      fn();\r\n    }\r\n  }\r\n\r\n  function getFields(docmeta) {\r\n    const noValueTypes = [\r\n      \"Section Break\",\r\n      \"Column Break\",\r\n      \"HTML\",\r\n      \"Table\",\r\n      \"Table MultiSelect\",\r\n      \"Button\",\r\n      \"Image\",\r\n      \"Fold\",\r\n      \"Heading\"\r\n    ];\r\n    return docmeta.fields.filter(f => {\r\n      return !f.hidden && noValueTypes.indexOf(f.fieldtype) === -1;\r\n    });\r\n  }\r\n\r\n  function refreshField(doctype, fieldname) {\r\n    core.ui.refreshField(doctype, fieldname);\r\n  }\r\n\r\n  function showSpinner(show) {\r\n    core.bus.post({\r\n      id: \"spinner_service\",\r\n      data: {\r\n        show: show\r\n      }\r\n    });\r\n  }\r\n\r\n  function showMessage(indicator, msg) {\r\n    core.messages.next({\r\n      indicator,\r\n      message: msg\r\n    });\r\n  }\r\n};\r\n",
  "docstatus": 0,
  "doctype": "Renovation Script",
  "modified": "2020-12-27 19:29:20.723109",
  "name": "Data Export",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "target_dt": "Data Export"
 },
 {
  "code": "// Data Import\r\n// tslint:disable-next-line: no-unused-expression\r\ncore => {\r\n\r\n  function showSpinner(show) {\r\n    core.bus.post({\r\n      id: \"spinner_service\",\r\n      data: {\r\n        show: show\r\n      }\r\n    });\r\n  }\r\n\r\n  function setupImportLog(doc) {\r\n    doc.import_log = \"\";\r\n    if (!doc.log_details) {\r\n      return;\r\n    }\r\n    const logs = (JSON.parse(doc.log_details) || {}).messages;\r\n    if (!logs || logs.length === 0) {\r\n      return;\r\n    }\r\n    console.log(\"Import Logs\", logs);\r\n    let rows = \"\";\r\n    for (const l of logs) {\r\n      if (doc.show_only_errors && l.indicator !== \"red\") {\r\n        continue;\r\n      }\r\n      rows += `\r\n        <tr>\r\n          <td>${l.row}</td>\r\n          <td>\r\n            <span class=\"indicator ${l.indicator}\">\r\n              ${l.title.replace(/(desk)?#Form/, \"\\/#/form\")}\r\n            </span>\r\n          </td>\r\n          <td>\r\n            ${l.message.replace(/(desk)?#Form/, \"\\/#/form\")}\r\n            <a href=\"${l.link.replace(/(desk)?#Form/, \"\\/#/form\")}\">\r\n              <span class=\"eva eva-arrow-circle-right float-right data-import-log-link\"></span>\r\n            </a>\r\n          </td>\r\n        </tr>\r\n      `;\r\n      console.log(l);\r\n    }\r\n    doc.import_log = `\r\n    <style>\r\n      .indicator::before {\r\n        margin: 0px 4px 0px 0px;\r\n        content: '';\r\n        display: inline-block;\r\n        height: 8px;\r\n        width: 8px;\r\n        border-radius: 8px;\r\n      }\r\n      .indicator.red::before {\r\n        background: red;\r\n      }\r\n      .indicator.green::before {\r\n        background: green;\r\n      }\r\n      .eva.data-import-log-link {\r\n        font-size: 1.5em;\r\n      }\r\n    </style>\r\n    <table class=\"table table-bordered table-striped\">\r\n      <thead>\r\n        <tr>\r\n          <th>Row No.</th>\r\n          <th>Row Status</th>\r\n          <th>Message</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        ${rows}\r\n      </tbody>\r\n    </table>\r\n    `;\r\n    rcore.ui.refreshField(\"Data Import\", \"import_log\")\r\n  }\r\n\r\n  function addStartImportButton(doc) {\r\n    if (doc.reference_doctype && doc.import_file && doc.total_rows &&\r\n      doc.docstatus === 0 && (!doc.import_status || doc.import_status === \"Failed\")) {\r\n        core.bus.post({\r\n          id: \"form_add_custom_button\",\r\n          data: {\r\n            label: \"Start Import\",\r\n            onclick: (c, d) => {\r\n              showSpinner(true);\r\n              core.call({\r\n                cmd: \"frappe.core.doctype.data_import.data_import.import_data\",\r\n                data_import: doc.name\r\n              }).then((r) => {\r\n                showSpinner(false);\r\n                if (r.success) {\r\n                  core.messages.next({\r\n                    message: \"Please reload this document after 5 seconds to see the status\",\r\n                    indicator: \"green\"\r\n                  });\r\n                } else {\r\n                  core.messages.next({\r\n                    message: \"Failed starting the import, please try again\",\r\n                    indicator: \"red\"\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n      }\r\n  }\r\n\r\n  core.scriptManager.addEvents({\r\n    doctype: \"Data Import\",\r\n    eventDict: {\r\n      form_setup: (c, doc) => {\r\n        addStartImportButton(doc);\r\n        setupImportLog(doc);\r\n      },\r\n      show_only_errors: (c, doc) => {\r\n        setupImportLog(doc);\r\n      },\r\n      action: (core, doc) => {\r\n        if(doc.action == \"Insert new records\") {\r\n          doc.insert_new = 1;\r\n          doc.overwrite = 0;\r\n        } else if (doc.action == \"Update records\"){\r\n          doc.insert_new = 0;\r\n          doc.overwrite = 1;\r\n        }\r\n      }\r\n    }\r\n  });\r\n};\r\n",
  "docstatus": 0,
  "doctype": "Renovation Script",
  "modified": "2020-03-16 15:53:34.328669",
  "name": "Data Import",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "target_dt": "Data Import"
 },
 {
  "code": "// Broadcast Message\r\ncore => {\r\n  const showSpinner = () =>\r\n    core.bus.post({ id: \"spinner_service\", data: { show: true } });\r\n  const hideSpinner = () =>\r\n    core.bus.post({ id: \"spinner_service\", data: { show: false } });\r\n\r\n  core.scriptManager.addEvents({\r\n    doctype: \"Broadcast Message\",\r\n    eventDict: {\r\n      form_setup: (core, doc) => {\r\n        addSendButton(core, doc);\r\n      }\r\n    }\r\n  });\r\n\r\n  function addSendButton(core, doc) {\r\n    if (doc.docstatus !== 1) {\r\n      return;\r\n    }\r\n    core.bus.post(\"form_add_custom_button\", {\r\n      label: \"Send Message\",\r\n      onclick: async (core, doc) => {\r\n        showSpinner();\r\n        const r = await core.call({\r\n          cmd: \"runserverobj\",\r\n          method: \"send\",\r\n          dt: doc.doctype,\r\n          dn: doc.name\r\n        });\r\n        if (!r.success) {\r\n          core.messages.next({\r\n            message: \"Something went wrong, Please try again!\",\r\n            indicator: \"red\"\r\n          });\r\n        }\r\n        hideSpinner();\r\n      }\r\n    });\r\n  }\r\n};\r\n",
  "docstatus": 0,
  "doctype": "Renovation Script",
  "modified": "2020-03-31 09:40:06.582091",
  "name": "Broadcast Message RScript",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "target_dt": "Broadcast Message"
 }
]